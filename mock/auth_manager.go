// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/freecloudio/server/application/manager (interfaces: AuthManager)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	authorization "github.com/freecloudio/server/application/authorization"
	models "github.com/freecloudio/server/domain/models"
	fcerror "github.com/freecloudio/server/domain/models/fcerror"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthManager is a mock of AuthManager interface.
type MockAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthManagerMockRecorder
}

// MockAuthManagerMockRecorder is the mock recorder for MockAuthManager.
type MockAuthManagerMockRecorder struct {
	mock *MockAuthManager
}

// NewMockAuthManager creates a new mock instance.
func NewMockAuthManager(ctrl *gomock.Controller) *MockAuthManager {
	mock := &MockAuthManager{ctrl: ctrl}
	mock.recorder = &MockAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthManager) EXPECT() *MockAuthManagerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthManager) CreateUser(arg0 *authorization.Context, arg1 *models.User) (*models.Session, *fcerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(*fcerror.Error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthManagerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthManager)(nil).CreateUser), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockAuthManager) GetUserByID(arg0 *authorization.Context, arg1 models.UserID) (*models.User, *fcerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*fcerror.Error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthManagerMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthManager)(nil).GetUserByID), arg0, arg1)
}

// Login mocks base method.
func (m *MockAuthManager) Login(arg0, arg1 string) (*models.Session, *fcerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(*fcerror.Error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthManagerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthManager)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockAuthManager) Logout(arg0 models.Token) *fcerror.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(*fcerror.Error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthManagerMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthManager)(nil).Logout), arg0)
}

// VerifyToken mocks base method.
func (m *MockAuthManager) VerifyToken(arg0 models.Token) (*models.User, *fcerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*fcerror.Error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthManagerMockRecorder) VerifyToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthManager)(nil).VerifyToken), arg0)
}
