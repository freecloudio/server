type Node {
	id: ID!
	created: Time!
	updated: Time!

	size: Int!
	mime_type: String!
	name: String!
	owner: User!
	parent_node: Node
	type: NodeType!
	is_starred: Boolean!
	path: String!
	full_path: String!

	files: [Node!]
}

enum NodeType {
	FILE
	FOLDER
}

input NodeIdentifierInput {
	id: ID
	full_path: String
}

input NodeInput {
	parent_node_identifier: NodeIdentifierInput!
	name: String!
	type: NodeType!
}

type NodeCreationResult {
	created: Boolean!
	node: Node!
}

extend type Query {
	node(input: NodeIdentifierInput!): Node!
}

extend type Mutation {
	createNode(input: NodeInput!): NodeCreationResult!
}